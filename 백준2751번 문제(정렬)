내가 부족했던 점 qsort, bubble sort, insert sort에 대한 개념만 알고 있지 실제 코드에서의 활용방안에 대해서 무지했음.
-우선 qsort부터
int num1=*(int*)a의 의미는  num1 변수에 a가 가리키는 주소에 있는 정보를 int형식으로 반환하겠습니다로 이해한다.
int compare(const void* a, const void* b) {
    int val1 = *(const int*)a;
    int val2 = *(const int*)b;

    if (val1 < val2) return -1;
    if (val1 > val2) return 1;
    return 0;
}
이것은 qsort내에 활용되는 compare함수인데 이해도 중요하지만 형태의 암기도 매우 중요하게 작동한다. 
qsort의 양식은 qsort(num,sizeof(num)/sizoef(int),sizeof(int),compare)로 이루어진다.
#define _CRT_SECURE_NO_WARNINGS
#include <Stdio.h>
#include <stdlib.h>
int arr[1000000]; //전역변수로 꺼내서 내용물이 삭제되지 않도록 했다.
int compare(const void* a, const void* b)
{
	int num1 = *(int*)a;;
	int num2 = *(int*)b;
	if (num1 < num2)
	{
		return -1; //qsort내부에서 num1이 num2보다 작구나를 인식
	}
	if (num1 > num2)
	{
		return 1;//qsort내부에서 num1이 num2보다 크다고 인식하고 위치를 바꿈
	}
	return 0;//두 값이 같다고 인식
}

int main()
{
	
	int number;
	scanf("%d", &number);
	for (int i = 0; i < number; i++)
	{
		scanf("%d", &arr[i]);
	}
	qsort(arr, number, sizeof(int), compare);
	for (int i = 0; i < number; i++)
	{
		printf("%d\n", arr[i]);
	}
	return 0;
}


--bubble sorting----------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
int arr[1000000];

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }
    bubbleSort(arr, n);
    printf("Sorted array: \n");
    for (int i = 0; i < n; i++) {
        printf("%d\n", arr[i]);
    }
    printf("\n");
    return 0;
}
//근데 효율성이 낮아서 잘 안씀
------ insertion sort---------------------------------------------------------------
void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        // arr[0..i-1] 요소 중 key보다 큰 요소를 오른쪽으로 한 칸씩 이동
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key; // key를 정렬된 부분에 삽입
    }
}

int main() {
    int arr[] = { 12, 11, 13, 5, 6 };
    int n = sizeof(arr) / sizeof(arr[0]);

    insertionSort(arr, n);

    printf("Sorted array: \n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    return 0;
}
//힙정렬
#include <stdio.h>

// 배열의 한 요소를 힙의 올바른 위치로 이동하는 함수
void heapify(int arr[], int n, int i) {
    int largest = i; // 가장 큰 요소를 초기화 (루트)
    int left = 2 * i + 1; // 왼쪽 자식 노드
    int right = 2 * i + 2; // 오른쪽 자식 노드

    // 왼쪽 자식이 더 크면 largest를 왼쪽 자식으로 업데이트
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // 오른쪽 자식이 더 크면 largest를 오른쪽 자식으로 업데이트
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // largest가 i가 아니면 스왑하고 계속 heapify
    if (largest != i) {
        int swap = arr[i];
        arr[i] = arr[largest];
        arr[largest] = swap;

        heapify(arr, n, largest);
    }
}

// 주어진 배열을 힙 정렬하는 함수
void heapSort(int arr[], int n) {
    // 배열을 힙으로 구축
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // 하나씩 요소를 추출하며 힙을 재구축
    for (int i = n - 1; i >= 0; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;

        heapify(arr, i, 0);
    }
}

// 배열을 출력하는 함수
void printArray(int arr[], int n) {
    for (int i = 0; i < n; ++i)
        printf("%d ", arr[i]);
    printf("\n");
}

// 메인 함수
int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    heapSort(arr, n);

    printf("Sorted array is \n");
    printArray(arr, n);
}
