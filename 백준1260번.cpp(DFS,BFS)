//DFS의 경우 재귀함수로 끝임없이 파고들어가고 BFS는 QUEUE를 사용해서 여기에 값들이 연결되어있는지 아닌지를 통해 연산한다.
//간선이 연결되어있다는 것을 나타내주는 GRAPH, 이미 방문했다는 것을 나타내주는 VISIT배열등 배울 것이 많은 문항이다.
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Graph[1001][1001] = { 0 };
int DFSvisit[1001] = { 0 };
int BFSvisit[1001] = { 0 };
int queue[1001];

void DFS(int v, int N)
{
	int i;
	DFSvisit[v] = 1;
	printf("%d", v);
	for (i = 1; i <= N; i++)
	{
		if (Graph[v][i] == 1 && DFSvisit[i] == 0)
		{
			DFS(i, N);
		}
	}
	return;
}

void BFS(int v, int N)
{
	int front = 0, rear = 0, Pop, i;
	printf("%d", v);
	queue[0] = v;

	rear++;;
	BFSvisit[v] = 1;
	while (front < rear)//front는 레벨을 뜻함 rear는 더이상 연결된게 있는지 없는지를 확인해주는 녀석
	{
		Pop = queue[front];//
		front++;//이건 레벨을 변화
		for (i = 1; i <= N; i++)
		{
			if (Graph[Pop][i] == 1 && BFSvisit[i] == 0)//노드 번호상에서 연결된 다른 노드들의 번호를 인식하는거야
			{
				printf("%d", i);
				queue[rear] = i;
				rear++;
				BFSvisit[i] = 1;

			}
		}
	}
	return;
}

int main()
{
	int N, M, Start;
	int i, x, y;
	scanf("%d%d%d", &N, &M, &Start);//각각 노드숫자, 간선수, 시작번호
	for (int i = 0; i < M; i++)
	{
		scanf("%d%d", &x, &y);
		Graph[x][y] = 1;
		Graph[y][x] = 1;

	}
	DFS(Start, N);
	printf("\n");
	BFS(Start, N);
	return 0;
}
